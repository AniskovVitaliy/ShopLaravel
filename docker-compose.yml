# Файл docker-compose должен начинаться с тега версии.
# Здесь используется "3" так как это - самая свежая версия на момент написания этого кода.
version: '3'

# services - контейнеры
services:

  # (контейнер/сервис) Nginx (может иметь любое имя)
  nginx:
    # Образ из которого будет создан контейнер
    image: nginx:latest
    # Перечисляем тома (volumes)
    # Они будут подключены к файловой системе сервиса
    # Например, все что находится в . мы увидим в директории /var/www
    # a ./_docker/nginx/conf.d/ будет в /etc/nginx/conf.d
    volumes:
      - ./:/var/www
      - ./_docker/nginx/conf.d/:/etc/nginx/conf.d
    # Ключевое слово ports позволяет пробросить порты
    # Перенаправление этого порта на порт компьютера.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    ports:
      - "8080:80"
    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
    # Сервис будет запущен, только после старта app
    depends_on:
      - app
    # Задаем свое имя для контенера, в противном случае docker будет придумывать его за нас (что не всегда удобно)
    container_name: pr_nginx

  # (контейнер/сервис) App (может иметь любое имя)
  app:
    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    build:
      # Контекст для сборки образа,
      # в данном случае, текущая директория
      context: .
      # Имя Docker-файла из которого будет собран образ
      dockerfile: _docker/app/Dockerfile
    # Перечисляем тома (volumes)
    # Они будут подключены к файловой системе сервиса
    # Например, все что находится в . мы увидим в директории /var/www
    volumes:
      - ./:/var/www
    environment:
        - PHP_IDE_CONFIG=serverName=laravelshopserver
    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
    # Сервис будет запущен, только после старта app
    depends_on:
      - db
    # Задаем свое имя для контенера, в противном случае docker будет придумывать его за нас (что не всегда удобно)
    container_name: pr_app

  # (контейнер/сервис) db (может иметь любое имя)
  db:
    # Имя образа. Здесь мы используем базу данных MySql
    image: mysql:8.0
    # Если сервис ляжет данная дирректива будет его поднимать
    restart: always
    # Перечисляем тома (volumes)
    # Они будут подключены к файловой системе сервиса
    # Например, все что находится в ./tmp/db мы увидим в директории /var/lib/mysql
    volumes:
      - /var/lib/mysql/local:/var/lib/mysql
    # Так задаются переменные окружения
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    # Ключевое слово ports позволяет пробросить порты
    # Перенаправление этого порта на порт компьютера.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    ports:
       - "8101:3306"
    # Команда, которую нужно запустить после создания образа.
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci
    # Задаем свое имя для контенера, в противном случае docker будет придумывать его за нас (что не всегда удобно)
    container_name: pr_db
